{
--
-- Copyright (c) 2011, Jean Joskin
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--     * Redistributions of source code must retain the above copyright
--       notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above copyright
--       notice, this list of conditions and the following disclaimer in the
--       documentation and/or other materials provided with the distribution.
--     * Neither the name of Jean Joskin nor the
--       names of its contributors may be used to endorse or promote products
--       derived from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL JEAN JOSKIN BE LIABLE FOR ANY
-- DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
-- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--
}

MODULE {Language.JsLib.Printer.Pretty} {printPretty,printPretty'} {}

PRAGMA genlinepragmas

INCLUDE "../AST.ag"

imports
{
import Text.PrettyPrint.HughesPJ
import Language.JsLib.AST hiding (Ident,Number)
import Language.JsLib.Printer.Util
import Data.Maybe (isNothing,catMaybes)
}

{
-- |Pretty prints an AST given its root node
printPretty :: Program -> String
printPretty = render . printPretty'

printPretty' :: Program -> Doc
printPretty' p = let inh = Inh_Program
                     syn = wrap_Program (sem_Program p) inh
                 in  pp_Syn_Program syn
}

ATTR FunctionBody [ | | pp USE {:} {[]} : {[Doc]} ]

SEM Program [ | | pp : {Doc} ]
  | Program lhs.pp = vcat @body.pp

SEM SourceElement [ | | pp : {Doc} ]
  | SEStatement lhs.pp = @stmt.pp
  | SEFunctionDecl lhs.pp = text "function" <+> text @ident <> parens (commaList (map text @params)) $+$
                              blockBraces (vcat @body.pp) $+$ empty

-------------------------------------------------------------------------------
-- Statement
-------------------------------------------------------------------------------

ATTR Statements [ | | pp USE {:} {[]} : {[Doc]} ]

SEM MbStatement [ | | pp : {Doc} isBlock : {Bool} ]
  | Just    lhs.pp      = @just.pp
            lhs.isBlock = @just.isBlock
  | Nothing lhs.pp      = empty
            lhs.isBlock = False

SEM Statement [ | | pp : {Doc} isBlock : {Bool} ]
  | SEmpty    lhs.pp      = semi
              lhs.isBlock = False
  | SBlock    lhs.pp      = blockBraces (vcat @body.pp)
              lhs.isBlock = True
  | SVariable lhs.pp      = text "var" <+> (vSepList comma @assigns.pp) <> semi
              lhs.isBlock = False
  | SExpression lhs.pp    = @expr.pp <> semi
              lhs.isBlock = False
  | SIf       lhs.pp      = text "if" <+> parens @cond.pp $+$ indentStmt @thenStmt.isBlock @thenStmt.pp $+$
                              if isEmpty @elseStmt.pp then empty
                                 else text "else" $+$ indentStmt @elseStmt.isBlock @elseStmt.pp
              lhs.isBlock = False
  | SDoWhile  lhs.pp      = text "do" $$ @body.pp $$ text "while" <+> parens @cond.pp <> semi
              lhs.isBlock = False
  | SWhile    lhs.pp      = text "while" <+> parens @cond.pp $$ indentStmt @stmt.isBlock @stmt.pp
              lhs.isBlock = False
  | SFor      lhs.pp      = text "for" <+> parens @clause.pp $$ indentStmt @stmt.isBlock @stmt.pp
              lhs.isBlock = False
  | SContinue lhs.pp      = text "continue" <+> maybeText @ident <> semi
              lhs.isBlock = False
  | SBreak    lhs.pp      = text "break" <+> maybeText @ident <> semi
              lhs.isBlock = False
  | SReturn   lhs.pp      = text "return" <+> @value.pp <> semi
              lhs.isBlock = False
  | SWith     lhs.pp      = text "with" <+> parens @expr.pp $$ indentStmt @stmt.isBlock @stmt.pp
              lhs.isBlock = False
  | SSwitch   lhs.pp      = text "switch" <+> parens @cond.pp $$ blockBraces (vcat @cases.pp)
              lhs.isBlock = False
  | SLabel    lhs.pp      = text @name <> colon <+> @stmt.pp
              lhs.isBlock = False
  | SThrow    lhs.pp      = text "throw" <+> @value.pp <> semi
              lhs.isBlock = False
  | STry      lhs.pp      = text "try" $+$ indentStmt @stmt.isBlock @stmt.pp $+$
                              (if isEmpty @catch.pp then empty else @catch.pp) $+$
                              (if isEmpty @finally.pp then empty else text "finally" $+$ indentStmt @finally.isBlock @finally.pp)
              lhs.isBlock = False
  | SDebugger lhs.pp      = text "debugger" <> semi
              lhs.isBlock = False

-------------------------------------------------------------------------------
-- Expression
-------------------------------------------------------------------------------

ATTR Expression AssignOp [ | | pp : {Doc} ]
ATTR Expressions Arguments [ | | pp USE {:} {[]} : {[Doc]} ]

SEM MbExpression [ | | pp : {Doc} ]
  | Just lhs.pp    = @just.pp
  | Nothing lhs.pp = empty

SEM Expression
  | EExpression  lhs.pp = parens @expr.pp
  | EThis        lhs.pp = text "this" 
  | EIdent       lhs.pp = text @ident
  | ENull        lhs.pp = text "null"
  | EBool        lhs.pp = text (if @value then "true" else "false")
  | ENumeric     lhs.pp = prettyNum @value
  | EString      lhs.pp = text @value
  | ERegExp      lhs.pp = text @regexp
  | EArray       lhs.pp = lbrack <> commaList @exprs.pp <> rbrack
  | EObject      lhs.pp = objectBraces (vSepList comma @props.pp)
  | EFunction    lhs.pp = text "function" <+> maybeText @ident <>
                            parens (commaList (map text @params)) $$
                            blockBraces (vcat @body.pp)
  | EIndex       lhs.pp = @expr.pp <> brackets @index.pp
  | EDot         lhs.pp = @expr.pp <> text "." <> text @propertyName
  | ENew         lhs.pp = text "new" <+> @expr.pp <> parens (commaList @args.pp)
  | ECall        lhs.pp = @expr.pp <> parens (commaList @args.pp)
  | EComma       lhs.pp = @hd.pp <> text ", " <> @tl.pp
  | EPostInc     lhs.pp = @expr.pp <> text "++"
  | EPostDec     lhs.pp = @expr.pp <> text "--"
  | EDelete      lhs.pp = text "delete" <+> @expr.pp
  | EVoid        lhs.pp = text "void" <+> @expr.pp
  | ETypeOf      lhs.pp = text "typeof" <+> @expr.pp
  | EPreInc      lhs.pp = text "++" <> @expr.pp
  | EPreDec      lhs.pp = text "--" <> @expr.pp
  | EUnaryPlus   lhs.pp = text "+" <> @expr.pp
  | EUnaryMin    lhs.pp = text "-" <> @expr.pp
  | EBitNot      lhs.pp = text "~" <> @expr.pp
  | ELogicNot    lhs.pp = text "!" <> @expr.pp
  | EMultiply    lhs.pp = @left.pp <+> text "*" <+> @right.pp
  | EDivide      lhs.pp = @left.pp <+> text "/" <+> @right.pp
  | EModulus     lhs.pp = @left.pp <+> text "%" <+> @right.pp
  | EAdd         lhs.pp = @left.pp <+> text "+" <+> @right.pp
  | ESubtract    lhs.pp = @left.pp <+> text "-" <+> @right.pp
  | ESignedShiftLeft lhs.pp = @left.pp <+> text "<<" <+> @right.pp
  | ESignedShiftRight lhs.pp = @left.pp <+> text ">>" <+> @right.pp
  | EUnsignedShiftRight lhs.pp = @left.pp <+> text ">>>" <+> @right.pp
  | ELess        lhs.pp = @left.pp <+> text "<" <+> @right.pp
  | EGreater     lhs.pp = @left.pp <+> text ">" <+> @right.pp
  | ELessEqual   lhs.pp = @left.pp <+> text "<=" <+> @right.pp
  | EGreaterEqual lhs.pp = @left.pp <+> text ">=" <+> @right.pp
  | EInstanceof  lhs.pp = @expr.pp <+> text "instanceof" <+> @ty.pp
  | EIn          lhs.pp = @left.pp <+> text "in" <+> @right.pp
  | EEqual       lhs.pp = @left.pp <+> text "==" <+> @right.pp
  | ENotEqual    lhs.pp = @left.pp <+> text "!=" <+> @right.pp
  | EStrictEqual lhs.pp = @left.pp <+> text "===" <+> @right.pp
  | EStrictNotEqual lhs.pp = @left.pp <+> text "!==" <+> @right.pp
  | EBitAND      lhs.pp = @left.pp <+> text "&" <+> @right.pp
  | EBitXOR      lhs.pp = @left.pp <+> text "^" <+> @right.pp
  | EBitOR       lhs.pp = @left.pp <+> text "|" <+> @right.pp
  | ELogicAND    lhs.pp = @left.pp <+> text "&&" <+> @right.pp
  | ELogicOR     lhs.pp = @left.pp <+> text "||" <+> @right.pp
  | EConditional lhs.pp = @cond.pp <+> text "?" <+> @yes.pp <+> text ":" <+> @no.pp
  | EAssign      lhs.pp = @left.pp <+> @op.pp <+> @right.pp

SEM AssignOp
  | AEquals      lhs.pp = text "="
  | AMultiply    lhs.pp = text "*="
  | ADivide      lhs.pp = text "/="
  | AAdd         lhs.pp = text "+="
  | ASubtract    lhs.pp = text "-="
  | AModulus     lhs.pp = text "%="
  | ASignedShiftLeft lhs.pp = text "<<="
  | ASignedShiftRight lhs.pp = text ">>="
  | AUnsignedShiftRight lhs.pp = text ">>>="
  | ABitAND      lhs.pp = text "&="
  | ABitXOR      lhs.pp = text "^="
  | ABitOR       lhs.pp = text "|="

-------------------------------------------------------------------------------
-- Object properties
-------------------------------------------------------------------------------

ATTR PropertyAssignments [ | | pp USE {:} {[]} : {[Doc]} ]

SEM PropertyAssignment [ | | pp : {Doc} ]
  | PAExpr lhs.pp = @name.pp <+> text ":" <+> @value.pp
  | PAGet  lhs.pp = text "get" <+> @name.pp <> text "()" $$
                      blockBraces (vcat @body.pp)
  | PASet  lhs.pp = text "set" <+> @name.pp <> parens (text @args) $$
                      blockBraces (vcat @body.pp)

SEM PropertyName [ | | pp : {Doc} ]
  | PNIdent   lhs.pp = text @name
  | PNString  lhs.pp = text @str
  | PNNumeric lhs.pp = text (show @num)

SEM MbDeclExpr [ | | pp : {Doc} ]
  | Just lhs.pp    = @just.pp
  | Nothing lhs.pp = empty

-------------------------------------------------------------------------------
-- Declarations (var)
-------------------------------------------------------------------------------

ATTR Decls [ | | pp USE {:} {[]} : {[Doc]} ]

SEM Decl [ | | pp : {Doc} ]
  | Decl lhs.pp = text @ident <+>
                    if isEmpty @expr.pp then empty else text "=" <+> @expr.pp

-------------------------------------------------------------------------------
-- Catch clause
-------------------------------------------------------------------------------

SEM MbCatchClause [ | | pp : {Doc} ]
  | Just lhs.pp    = @just.pp
  | Nothing lhs.pp = empty

SEM CatchClause [ | | pp : {Doc} ]
  | CatchClause lhs.pp = text "catch" <+> parens (text @ident) $$ indentStmt @stmt.isBlock @stmt.pp

-------------------------------------------------------------------------------
-- For clause
-------------------------------------------------------------------------------

SEM ForClause [ | | pp : {Doc} ]
  | FCExprExprExpr lhs.pp = @init.pp <> semi <+> @cond.pp <> semi <+> @next.pp
  | FCVarExprExpr  lhs.pp = text "var" <+> commaList @init.pp <> semi <+> @cond.pp <> semi <+> @next.pp
  | FCLhsIn        lhs.pp = @elem.pp <+> text "in" <+> @set.pp
  | FCVarIn        lhs.pp = text "var" <+> @elem.pp <+> text "in" <+> @set.pp

-------------------------------------------------------------------------------
-- Case clause
-------------------------------------------------------------------------------

ATTR CaseClauses [ | | pp USE {:} {[]} : {[Doc]} ]

SEM CaseClause [ | | pp : {Doc} ]
  | CCCase     lhs.pp = text "case" <+> @value.pp <> colon <+> foldr ($$) empty @body.pp
  | CCDefault  lhs.pp = text "default" <> colon <+> foldr ($$) empty @body.pp

-------------------------------------------------------------------------------
-- Objective J
-------------------------------------------------------------------------------

ATTR JArgs JMethodParams JImplementationElements JMembers [ | | pp USE {:} {[]} : {[Doc]} ]

SEM SourceElement
  | SEImplementation lhs.pp = text "@implementation" <+> text @ident <+>
                                case @extends of { (Just e) -> text ":" <+> text e; _ -> empty } $+$
                                blockBraces (vcat @members.pp) $+$
                                vcat @body.pp $+$
                                text "@end"
  | SECategory lhs.pp = text "@implementation" <+> text @extends <+>
                           parens (text @ident) $+$
                           vcat @body.pp $+$
                           text "@end"
  | SEImport lhs.pp = text "@import" <+> text @path

SEM Expression
  | EJMessage lhs.pp = brackets (@target.pp <+> hsep @args.pp <> 
                                  (if null @varArgs.pp then empty else comma <+> (commaList @varArgs.pp))
                                )
  | EJSelector lhs.pp = text "@selector" <> parens (hcat $ map (\(f,c) -> text f <> if c then colon else empty) @fields)
  | EJString  lhs.pp = text "@" <> text @value
  | EJNil     lhs.pp = text "nil"
  | EJSuper   lhs.pp = text "super"
  | EJSelf    lhs.pp = text "self"

SEM JImplementationElement [ | | pp : {Doc} ]
  | JClassMethod    lhs.pp = text "-" <+> parens (@returnTy.pp) <>
                              hsep @params.pp <> (if @varArgs then text ", ..." else empty) $+$
                              blockBraces (vcat @body.pp) $+$ empty
  | JInstanceMethod lhs.pp = text "+" <+> parens (@returnTy.pp) <>
                              hsep @params.pp <>  (if @varArgs then text ", ..." else empty) $+$
                              blockBraces (vcat @body.pp) $+$ empty

SEM JMethodParam [ | | pp : {Doc} ]
  | JMethodParam lhs.pp = text @name <>
                            (if isEmpty @param.pp then empty else colon <> @param.pp)

SEM JArg [ | | pp : {Doc} ]
  | JArg lhs.pp = text @name <>
                    (if isEmpty @value.pp then empty else colon <> @value.pp)

SEM JMember [ | | pp : {Doc} ]
  | JMember lhs.pp = @ty.pp <+> text @ident <+> @accessors.pp <> semi

SEM JTy [ | | pp : {Doc} ]
  | JTyObject   lhs.pp = text @ident
  | JTyId       lhs.pp = text "id"
  | JTyVoid     lhs.pp = text "void"
  | JTyBool     lhs.pp = text "$bool$"
  | JTyChar     lhs.pp = (if @signed then empty else text "unsigned") <+> text "char"
  | JTyFloat    lhs.pp = text "float"
  | JTyInt      lhs.pp = (if @signed then empty else text "unsigned") <+> text "int"
  | JTyShort    lhs.pp = (if @signed then empty else text "unsigned") <+> text "short"
  | JTyLong     lhs.pp = (if @signed then empty else text "unsigned") <+> text "long"
  | JTyLongLong lhs.pp = (if @signed then empty else text "unsigned") <+> text "long long"
  | JTyDouble   lhs.pp = text "double"
  | JTyAction   lhs.pp = text "@action"
  | JTyArray    lhs.pp = @ty.pp <> text "[]"
  | JTyPointer  lhs.pp = @ty.pp <> text "*"
  | JTyBrace    lhs.pp = braces @ty.pp

SEM JParam [ | | pp : {Doc} ]
  | Tuple lhs.pp = parens @x1.pp <> text @x2

SEM MbJParam [ | | pp : {Doc} ]
  | Just lhs.pp = @just.pp
  | Nothing lhs.pp = empty

SEM MbJAccessors [ | | pp : {Doc} ]
  | Just lhs.pp = @just.pp
  | Nothing lhs.pp = empty

SEM JAccessors [ | | pp : {Doc} ]
  | JAccessors lhs.pp = text "@accessors" <> maybeParens (commaList $ catMaybes
                          [if isNothing @property then Nothing else Just (text "property" <> text "=" <> maybeText @property),
                           if isNothing @getter then Nothing else Just (text "getter" <> text "=" <> maybeText @getter),
                           if isNothing @setter then Nothing else Just (text "setter" <> text "=" <> maybeText @setter),
                           if not @read && @write then Nothing else Just (text "readonly"),
                           if not @write && @read then Nothing else Just (text "writeonly"),
                           if @copy then Nothing else Just (text "copy") ] )

SEM PropertyName
  | PNCPString lhs.pp = text "@" <> text @str
